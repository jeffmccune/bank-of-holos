apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: prod-bank-security
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-reader
  namespace: prod-bank-security
rules:
- apiGroups:
  - ""
  resourceNames:
  - accounts-db-config
  - jwt-key
  - demo-data-config
  - ledger-db-config
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: prod-bank-security
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-reader
  namespace: prod-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-reader
subjects:
- kind: ServiceAccount
  name: bank-of-holos
  namespace: prod-bank-frontend
- kind: ServiceAccount
  name: bank-of-holos
  namespace: prod-bank-backend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: prod-bank-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jwt-key-writer
subjects:
- kind: ServiceAccount
  name: jwt-key-writer
  namespace: prod-bank-security
---
apiVersion: v1
data:
  1-load-testdata.sh: |
    #!/bin/bash
    # Copyright 2020 Google LLC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    # Immediately exit if any error occurs during script execution.
    set -o errexit

    # Skip adding data if not enabled
    if [ "$USE_DEMO_DATA" != "True"  ]; then
      echo "no demo users added"
      exit 0
    fi


    # Expected environment variables
    readonly ENV_VARS=(
      "POSTGRES_DB"
      "POSTGRES_USER"
      "LOCAL_ROUTING_NUM"
      "DEFAULT_PASSHASH"
    )


    add_user() {
      # Usage:  add_user "ACCOUNTID" "USERNAME" "FIRST_NAME"
      echo "adding user: $2"
      psql -X -v ON_ERROR_STOP=1 -v account="$1" -v username="$2" -v firstname="$3" -v passhash="$DEFAULT_PASSHASH" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO users VALUES (:'account', :'username', :'passhash', :'firstname', 'User', '2000-01-01', '-5', 'Bowling Green, New York City', 'NY', '10004', '111-22-3333') ON CONFLICT DO NOTHING;
    EOSQL
    }


    add_external_account() {
      # Usage:  add_external_account "OWNER_USERNAME" "LABEL" "ACCOUNT" "ROUTING"
      echo "user $1 adding contact: $2"
      psql -X -v ON_ERROR_STOP=1 -v username="$1" -v label="$2" -v account="$3" -v routing="$4" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO contacts VALUES (:'username', :'label', :'account', :'routing', 'true') ON CONFLICT DO NOTHING;
    EOSQL
    }


    add_contact() {
      # Usage:  add_contact "OWNER_USERNAME" "CONTACT_LABEL" "CONTACT_ACCOUNT"
      echo "user $1 adding external account: $2"
      psql -X -v ON_ERROR_STOP=1 -v username="$1" -v label="$2" -v account="$3" -v routing="$LOCAL_ROUTING_NUM" --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        INSERT INTO contacts VALUES (:'username', :'label', :'account', :'routing', 'false') ON CONFLICT DO NOTHING;
    EOSQL
    }


    # Load test data into the database
    create_accounts() {
      # Add demo users.
      add_user "1011226111" "testuser" "Test"
      add_user "1033623433" "alice" "Alice"
      add_user "1055757655" "bob" "Bob"
      add_user "1077441377" "eve" "Eve"

      # Make everyone contacts of each other
      add_contact "testuser" "Alice" "1033623433"
      add_contact "testuser" "Bob" "1055757655"
      add_contact "testuser" "Eve" "1077441377"
      add_contact "alice" "Testuser" "1011226111"
      add_contact "alice" "Bob" "1055757655"
      add_contact "alice" "Eve" "1077441377"
      add_contact "bob" "Testuser" "1011226111"
      add_contact "bob" "Alice" "1033623433"
      add_contact "bob" "Eve" "1077441377"
      add_contact "eve" "Testuser" "1011226111"
      add_contact "eve" "Alice" "1033623433"
      add_contact "eve" "Bob" "1055757655"

      # Add external accounts
      add_external_account "testuser" "External Bank" "9099791699" "808889588"
      add_external_account "alice" "External Bank" "9099791699" "808889588"
      add_external_account "bob" "External Bank" "9099791699" "808889588"
      add_external_account "eve" "External Bank" "9099791699" "808889588"
    }


    main() {
      if [[ -z "${DEFAULT_PASSHASH}" ]]; then
        echo "WARNING: INSECURE hard coded password hash.  Provide DEFAULT_PASSHASH instead." >&2
        DEFAULT_PASSHASH='\x243262243132244c48334f54422e70653274596d6834534b756673727563564b3848774630494d2f34717044746868366e42352e744b575978314e61'
      fi

      # Check environment variables are set
      for env_var in ${ENV_VARS[@]}; do
        if [[ -z "${!env_var}" ]]; then
          echo "Error: environment variable '$env_var' not set. Aborting."
          exit 1
        fi
      done

      create_accounts
    }


    main
  entrypoint: |
    #! /bin/bash
    #
    # Generate a secret to replace the insecure accounts-db-config ConfigMap
    # https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/kubernetes-manifests/accounts-db.yaml#L17-L20

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    export LC_ALL=C

    POSTGRES_DB="accounts-db"
    POSTGRES_USER="accounts-admin"
    set +o pipefail
    POSTGRES_PASSWORD="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)"
    set -o pipefail
    ACCOUNTS_DB_URI="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_DB}:5432/${POSTGRES_DB}"

    echo -n "$POSTGRES_DB" > POSTGRES_DB
    echo -n "$POSTGRES_USER" > POSTGRES_USER
    echo -n "$POSTGRES_PASSWORD" > POSTGRES_PASSWORD
    echo -n "$ACCOUNTS_DB_URI" > ACCOUNTS_DB_URI
    cp /config/1-load-testdata.sh .

    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic accounts-db-config --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: accounts-db-config
  namespace: prod-bank-security
---
apiVersion: v1
data:
  entrypoint: |
    #! /bin/bash
    #
    # Securely generate the demo-data-config Secret using a randomly generated
    # password.  We use a simple bash script in a Job, but this could also be a
    # secret generated in Vault, or a cloud Secret Manager.
    #
    # Replaces the hard-coded DEFAULT_PASSHASH variable at:
    # https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/src/accounts/accounts-db/initdb/1-load-testdata.sh#L102

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    export LC_ALL=C

    # Secure replacement for https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/kubernetes-manifests/config.yaml#L39-L42
    echo -n 'True' > USE_DEMO_DATA
    echo -n testuser > DEMO_LOGIN_USERNAME

    echo "generating DEMO_LOGIN_PASSWORD" >&2
    set +o pipefail
    export DEMO_LOGIN_PASSWORD="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)"
    set -o pipefail
    echo -n "$DEMO_LOGIN_PASSWORD" > DEMO_LOGIN_PASSWORD

    echo "bcrypt hashing DEMO_LOGIN_PASSWORD" >&2

    # Take care to avoid a trailing newline
    python3 <<EOF >DEFAULT_PASSHASH
    import bcrypt
    import os
    import sys

    password = os.getenv('DEMO_LOGIN_PASSWORD').encode('utf-8')
    hash = bcrypt.hashpw(password, bcrypt.gensalt()).decode()
    # write doesn't write a newline like print() does.
    sys.stdout.write(hash)
    EOF

    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic demo-data-config --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: demo-data-config
  namespace: prod-bank-security
---
apiVersion: v1
data:
  entrypoint: |-
    #! /bin/bash
    #

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    echo "generating private key" >&2
    ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N "" -C bank-of-holos
    echo "generating public key" >&2
    ssh-keygen -e -m PKCS8 -f jwtRS256.key > jwtRS256.key.pub
    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic jwt-key --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: prod-bank-security
---
apiVersion: v1
data:
  entrypoint: |
    #! /bin/bash
    #
    # Generate a secret to replace the insecure accounts-db-config ConfigMap
    # https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/v0.6.5/kubernetes-manifests/ledger-db.yaml#L17-L22

    tmpdir="$(mktemp -d)"
    finish() {
      status=$?
      rm -rf "${tmpdir}"
      return $status
    }
    trap finish EXIT

    set -euo pipefail

    cd "$tmpdir"
    mkdir secret
    cd secret

    export LC_ALL=C

    POSTGRES_DB="postgresdb"
    POSTGRES_USER="admin"
    set +o pipefail
    POSTGRES_PASSWORD="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)"
    set -o pipefail

    SPRING_DATASOURCE_PASSWORD="${POSTGRES_PASSWORD}"
    SPRING_DATASOURCE_URL="jdbc:postgresql://ledger-db:5432/${POSTGRES_DB}"
    SPRING_DATASOURCE_USERNAME="${POSTGRES_USER}"

    echo -n "$POSTGRES_DB" > POSTGRES_DB
    echo -n "$POSTGRES_USER" > POSTGRES_USER
    echo -n "$POSTGRES_PASSWORD" > POSTGRES_PASSWORD
    echo -n "$SPRING_DATASOURCE_PASSWORD" > SPRING_DATASOURCE_PASSWORD
    echo -n "$SPRING_DATASOURCE_URL" > SPRING_DATASOURCE_URL
    echo -n "$SPRING_DATASOURCE_USERNAME" > SPRING_DATASOURCE_USERNAME

    cd ..

    echo "copying secret into kubernetes manifest secret.yaml" >&2
    kubectl create secret generic ledger-db-config --from-file=secret --dry-run=client -o yaml > secret.yaml

    echo "applying secret.yaml" >&2
    kubectl apply --server-side=true -f secret.yaml

    echo "cleaning up" >&2
    rm -rf secret secret.yaml

    echo "ok done" >&2
kind: ConfigMap
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: ledger-db-config
  namespace: prod-bank-security
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: accounts-db-config
  namespace: prod-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: prod-bank-secrets
        environment: prod
        example.com/environment.name: prod
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: prod-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: accounts-db-config
        name: config
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: demo-data-config
  namespace: prod-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: prod-bank-secrets
        environment: prod
        example.com/environment.name: prod
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: prod-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: demo-data-config
        name: config
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: jwt-key-writer
  namespace: prod-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: prod-bank-secrets
        environment: prod
        example.com/environment.name: prod
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: prod-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: jwt-key-writer
        name: config
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    application: bank-of-holos
    argocd.argoproj.io/instance: prod-bank-secrets
    environment: prod
    example.com/environment.name: prod
    example.com/owner.name: security
    example.com/tier.name: foundation
    holos.run/component.name: prod-bank-secrets
    team: security
    tier: foundation
  name: ledger-db-config
  namespace: prod-bank-security
spec:
  template:
    metadata:
      labels:
        application: bank-of-holos
        argocd.argoproj.io/instance: prod-bank-secrets
        environment: prod
        example.com/environment.name: prod
        example.com/owner.name: security
        example.com/tier.name: foundation
        holos.run/component.name: prod-bank-secrets
        team: security
        tier: foundation
    spec:
      containers:
      - args:
        - /config/entrypoint
        command:
        - /bin/bash
        env:
        - name: HOME
          value: /tmp
        image: quay.io/holos-run/toolkit:2024-10-19
        name: toolkit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 8192
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jwt-key-writer
      volumes:
      - configMap:
          name: ledger-db-config
        name: config
